generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Services {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  price        Decimal @default(0) @db.Decimal(12, 2)
  senior_price Decimal @default(0) @db.Decimal(12, 2)
  duration     Int
}

model Staff {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  isSenior          Boolean
  description_short String
  description       String
  images            String
}

model Locations {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  address        String
  mapLink        String
  reservationUrl String
}

model Contacts {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        String //rework to enum
  name        String
  phoneNumber String
}

model Articles {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title  String
  text   String
  images String[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("Admin")
  email         String    @unique(map: "user_email_idx")
  password      String
  role          String    @default("user")
  emailVerified DateTime? @db.Timestamp(6)
  Account       Account[]
  Session       Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
